package com.usuarios.demo.controllers;

import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.UserRecord;
import com.usuarios.demo.entities.*;
import com.usuarios.demo.services.*;
import com.usuarios.demo.repositories.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.util.*;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.responses.ApiResponse;

import java.security.Principal;

@RestController
@RequestMapping("/api/medicos")
@Tag(name = "M√©dicos", description = "Endpoints para la gesti√≥n de m√©dicos")
public class MedicoController {

    @Autowired
    private MedicoService service;
    private JwtService jwtService;
    private MedicoRepository medicoRepository;

    @Operation(summary = "Obtener todos los m√©dicos", description = "Retorna una lista de todos los m√©dicos registrados en el sistema")
    @ApiResponse(responseCode = "200", description = "Lista de m√©dicos obtenida correctamente")
    @GetMapping
    public List<Medico> obtenerTodos() {
        return service.obtenerTodos();
    }

    @Operation(summary = "Obtener un m√©dico por ID", description = "Retorna los detalles del m√©dico identificado por el ID proporcionado")
    @ApiResponse(responseCode = "200", description = "M√©dico encontrado")
    @ApiResponse(responseCode = "404", description = "M√©dico no encontrado")
    @GetMapping("/{id}")
    public Optional<Medico> obtenerPorId(@PathVariable String id) {
        return service.obtenerPorId(id);
    }

    @Operation(summary = "Guardar un nuevo m√©dico", description = "Recibe un objeto m√©dico en el cuerpo de la solicitud y lo almacena en el sistema")
    @ApiResponse(responseCode = "200", description = "M√©dico guardado correctamente")
    @PostMapping
    public ResponseEntity<?> guardar(@RequestBody Medico medico) {
        try {
            Optional<CentroMedico> centro = service.obtenerCentroPorId(medico.getCentroMedico().getPkId());
            if (centro.isEmpty()) {
                return ResponseEntity.badRequest().body("Centro m√©dico no encontrado");
            }

            Optional<TipoDocumento> tipoDoc = service.obtenerTipoDocumentoPorId(medico.getTipoDocumento().getId());
            if (tipoDoc.isEmpty()) {
                return ResponseEntity.badRequest().body("Tipo de documento no encontrado");
            }

            if (medico.getCorreo() == null || medico.getCorreo().isBlank()) {
                return ResponseEntity.badRequest().body("Correo del m√©dico es obligatorio");
            }

            // Crear usuario en Firebase Authentication
            UserRecord.CreateRequest request = new UserRecord.CreateRequest()
                    .setEmail(medico.getCorreo())
                    .setPassword("medico123") // contrase√±a temporal
                    .setEmailVerified(false)
                    .setDisabled(false);

            UserRecord userRecord = FirebaseAuth.getInstance().createUser(request);

            // Asignar custom claim (rol: medico)
            Map<String, Object> claims = new HashMap<>();
            claims.put("role", "medico");
            FirebaseAuth.getInstance().setCustomUserClaims(userRecord.getUid(), claims);

            // Guardar en base de datos
            medico.setPkId(UUID.randomUUID().toString());
            medico.setCentroMedico(centro.get());
            medico.setTipoDocumento(tipoDoc.get());

            Medico guardado = service.guardar(medico);
            return ResponseEntity.ok(guardado);

        } catch (Exception e) {
            return ResponseEntity.status(500).body("Error al crear m√©dico: " + e.getMessage());
        }
    }

    @Operation(summary = "Eliminar un m√©dico", description = "Elimina el m√©dico identificado por el ID proporcionado")
    @ApiResponse(responseCode = "200", description = "M√©dico eliminado correctamente")
    @DeleteMapping("/{id}")
    public ResponseEntity<String> eliminar(@PathVariable String id) {
        try {
            service.eliminar(id);
            return ResponseEntity.ok("M√©dico eliminado correctamente");
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("‚ùå Error al eliminar el m√©dico: " + e.getMessage());
        }
    }

    @Operation(summary = "Actualizar informaci√≥n de un m√©dico", description = "Modifica los datos de un m√©dico ya registrado")
    @ApiResponse(responseCode = "200", description = "M√©dico actualizado correctamente")
    @ApiResponse(responseCode = "404", description = "M√©dico no encontrado")
    @PutMapping("/{id}")
    public ResponseEntity<?> actualizar(@PathVariable String id, @RequestBody Medico medicoActualizado) {
        Optional<Medico> existente = service.obtenerPorId(id);
        if (existente.isEmpty()) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("M√©dico no encontrado");
        }

        Optional<CentroMedico> centro = service.obtenerCentroPorId(medicoActualizado.getCentroMedico().getPkId());
        if (centro.isEmpty()) {
            return ResponseEntity.badRequest().body("Centro m√©dico no encontrado");
        }

        Optional<TipoDocumento> tipoDoc = service
                .obtenerTipoDocumentoPorId(medicoActualizado.getTipoDocumento().getId());
        if (tipoDoc.isEmpty()) {
            return ResponseEntity.badRequest().body("Tipo de documento no encontrado");
        }

        medicoActualizado.setCentroMedico(centro.get());
        medicoActualizado.setTipoDocumento(tipoDoc.get());
        medicoActualizado.setPkId(id);

        Medico actualizado = service.guardar(medicoActualizado);
        return ResponseEntity.ok(actualizado);
    }

    @Operation(summary = "Listar m√©dicos por centro m√©dico", description = "Devuelve todos los m√©dicos asociados al centro m√©dico dado")
    @ApiResponse(responseCode = "200", description = "M√©dicos obtenidos correctamente")
    @GetMapping("/centro-medico/{idCentro}")
    public List<Medico> obtenerPorCentro(@PathVariable Long idCentro) {
        return service.obtenerPorCentroMedico(idCentro);
    }

    @Operation(summary = "Filtrar m√©dicos", description = "Busca m√©dicos por nombre, tarjeta profesional o profesi√≥n (solo un filtro a la vez)")
    @ApiResponse(responseCode = "200", description = "Lista filtrada exitosamente")
    @GetMapping("/filtrar")
    public ResponseEntity<List<Medico>> filtrarMedicos(
            @RequestParam(required = false) String nombre,
            @RequestParam(required = false) String tarjeta,
            @RequestParam(required = false) String profesion) {

        List<Medico> resultados = service.filtrarMedicos(nombre, tarjeta, profesion);
        return ResponseEntity.ok(resultados);
    }

    @GetMapping("/details")
    public ResponseEntity<?> obtenerDetallesMedico(Principal principal) {
        String email = principal.getName();
        Optional<Medico> medico = service.obtenerPorCorreo(email);

        if (medico.isPresent()) {
            System.out.println("‚úÖ M√©dico encontrado: " + medico.get().getCorreo());
            System.out.println("‚úÖ URL de imagen: " + medico.get().getUrlImagen());
            return ResponseEntity.ok(medico.get());
        } else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("M√©dico no encontrado");
        }
    }

    @GetMapping("/firebase")
    public ResponseEntity<?> obtenerDetallesMedicoFirebase(@RequestParam String uid) {
        try {
            UserRecord userRecord = FirebaseAuth.getInstance().getUser(uid);
            if (userRecord != null) {
                return ResponseEntity.ok(userRecord);
            } else {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Usuario no encontrado en Firebase");
            }
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Error al obtener usuario: " + e.getMessage());
        }
    }

    @Operation(summary = "Buscar m√©dico por correo", description = "Devuelve el m√©dico cuyo correo coincida con el valor dado")
    @ApiResponse(responseCode = "200", description = "M√©dico encontrado")
    @ApiResponse(responseCode = "404", description = "M√©dico no encontrado")
    @GetMapping("/buscar-por-correo")
    public ResponseEntity<?> obtenerPorCorreo(@RequestParam String correo) {
        System.out.println("üìß Recibiendo correo: " + correo);
        Optional<Medico> medico = service.obtenerPorCorreo(correo);
        if (medico.isPresent()) {
            System.out.println("üß† M√©dico encontrado: " + medico.get().getNombre());
            System.out.println("üñºÔ∏è Imagen: " + medico.get().getUrlImagen());
            return ResponseEntity.ok(medico.get());
        } else {
            System.out.println("‚ùå M√©dico no encontrado");
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("M√©dico no encontrado");
        }
    }

    @Operation(summary = "Obtener ID del m√©dico autenticado", description = "Devuelve el ID del m√©dico asociado al usuario autenticado")
    @GetMapping("/medico-id")
    public ResponseEntity<?> obtenerMedicoId(@RequestHeader("Authorization") String token) {
        try {
            // Extraer el correo del m√©dico desde el token
            String correoMedico = jwtService.extractUsername(token.replace("Bearer ", ""));

            // Buscar el m√©dico asociado al correo extra√≠do
            Medico medico = medicoRepository.findByCorreo(correoMedico)
                    .orElseThrow(() -> new RuntimeException("M√©dico no encontrado"));

            // Devolver el ID del m√©dico
            return ResponseEntity.ok(medico.getPkId());
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Error al obtener el m√©dico: " + e.getMessage());
        }
    }

}
